// Calculates the `flex` property for a flex grid column. It accepts all of the same values as the
// basic `grid-column()` function, along with two extras:
//   - `expand` (the default) will make the column expand to fill space.
//   - `shrink` will make the column contract, so it only takes up the horizontal space it needs.
//
// @param {Mixed} $columns [expand] - Width of the column.
@function make-flex-column($columns: expand) {
    $flex: 1 1 0px; // sass-lint:disable-line zero-unit

    @if $columns == shrink {
        $flex: 0 0 auto;
    } @else if $columns != expand {
        $flex: 0 0 make-column($columns);
    }

    @return $flex;
}

// Creates a block grid for a flex grid row.
//
// @param {Number} $n - Number of columns to display on each row.
// @param {String} $selector - Selector to use to target columns within the row.
@mixin make-flex-layout(
    $n,
	$selector: '[#{map_get($grid-classes, 'col')}]'
) {
    flex-wrap: wrap;

    > #{$selector} {
        $pct: percentage(1/$n);

        flex: 0 0 $pct;
        max-width: $pct;
    }
}

// Changes the width flex grid column.
// @param {Mixed} $columns [expand] - Width of the column. Refer to the `flex-grid-column()` function to
// see possible values.
@mixin make-flex-size($columns: null) {
    $columns: $columns or expand;

    flex: make-flex-column($columns);

    // max-width fixes IE 10/11 not respecting the flex-basis property
    @if $columns != expand and $columns != shrink {
        max-width: make-column($columns);
    }
}

// Creates a container for a flex grid row.
//
// @param {Keyword|List} $behavior [null]
//   Modifications to the default grid styles. `nest` indicates the row will be placed inside another row.
// `collapse` indicates that the columns inside this row will not have padding. `nest collapse` combines both behaviors.
// @param {Keyword|Number} $size [$grid-row-width] Maximum size of the row. Set to `expand` to make the
// row taking the full width.
// @param {Number} $columns [null] - Number of columns to use for this row. If set to `null` (the default),
// the global column count will be used.
// @param {Boolean} $base [true] - Set to `false` to prevent basic styles from being output. Useful
// if you're calling this mixin on the same element twice, as it prevents duplicate CSS output.
// @param {Number|Map} $gutters [$grid-column-gutter] - Gutter map or single value to use when inverting
// margins, in case the row is nested. Responsive gutter settings by default.
@mixin make-flex-row(
    $behavior: null,
	$columns: null,
	$base: true,
	$wrap: true,
	$gutters: $grid-columns-gutter
) {
    $margin: auto;
    $wrap: if($wrap, wrap, nowrap);

    @if index($behavior, collapse) != null {
        margin-right: 0;
        margin-left: 0;
    } @else {
        @include make-row-nest($gutters);
    }

    @if $base {
        display: flex;
        flex-wrap: $wrap;
    }

    @if $columns != null {
        @include make-context($columns, $base) {
            @content;
        }
    }
}

// Creates a column for a flex grid. By default, the column will stretch to the full width of its
// container, but this can be overridden with sizing classes, or by using the `unstack` class on the parent flex row.
// @param {Mixed} $columns [expand] - Width of the column. Refer to the `flex-grid-column()` function
// to see possible values.
// @param {Number|Map} $gutters [$grid-column-gutter] - Map or single value for gutters width.
// See the `grid-column-gutter` mixin.
@mixin make-flex-column(
    $columns: expand,
	$gutters: $grid-columns-gutter
) {
    position: relative;
    width: 100%;
    min-height: 1px;

    // Base properties
    @include make-flex-size($columns);

    // Gutters
    @include make-column-gutter($gutters: $gutters);

    // fixes recent Chrome version not limiting child width
    // https://stackoverflow.com/questions/34934586/white-space-nowrap-and-flexbox-did-not-work-in-chrome
    @if $columns == expand {
        min-width: 0;
    }
}
