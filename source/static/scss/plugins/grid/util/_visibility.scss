// Hide an element by default, only displaying it above a certain screen size.
// @param {Keyword} $size - Breakpoint to use. **Must be a breakpoint defined in `$breakpoints`.**
@mixin show-for($size) {
    $size: map-get($grid-breakpoints, $size);
    $size: $size - 1;

    @include breakpoint($size down) {
        display: none !important;
    }
}

/// Hide an element by default, only displaying it within a certain breakpoint.
/// @param {Keyword} $size - Breakpoint to use. **Must be a breakpoint defined in `$breakpoints`.**
@mixin show-for-only($size) {
    $lower-bound-size: map-get($grid-breakpoints, $size);
    $upper-bound-size: map-next($grid-breakpoints, $size);

    // more often than not this will be correct, just one time round the loop it won't so set in scope here
    $lower-bound: $lower-bound-size - 1;
    // test actual lower-bound-size, if 0 set it to 0em
    @if strip-unit($lower-bound-size) == 0 {
        $lower-bound: $lower-bound-size;
    }

    @if $upper-bound-size == null {
        @media screen and (max-width: $lower-bound) {
            display: none !important;
        }
    } @else {
        $upper-bound: $upper-bound-size;

        @media screen and (max-width: $lower-bound), screen and (min-width: $upper-bound) {
            display: none !important;
        }
    }
}

/// Show an element by default, and hide it above a certain screen size.
/// @param {Keyword} $size - Breakpoint to use. **Must be a breakpoint defined in `$breakpoints`.**
@mixin hide-for($size) {
    @include breakpoint($size) {
        display: none !important;
    }
}

/// Show an element by default, and hide it above a certain screen size.
/// @param {Keyword} $size - Breakpoint to use. **Must be a breakpoint defined in `$breakpoints`.**
@mixin hide-for-only($size) {
    @include breakpoint($size only) {
        display: none !important;
    }
}
