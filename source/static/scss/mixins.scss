@charset "UTF-8";

// Functions
// ========================================================================
@import './mixins/functions/_is-length';
@import './mixins/functions/_is-size';
@import './mixins/functions/_is-map';
@import './mixins/functions/_assign-inputs';
@import './mixins/functions/_split';
@import './mixins/functions/_contains';

// Helpers
// ========================================================================
@import './mixins/helpers/_font-source-declaration';

// Mixins
// ========================================================================
@import './mixins/_font-face';
@import './mixins/_size';
@import './mixins/_button';
@import './mixins/_buttons';
@import './mixins/_text-inputs';
@import './mixins/_selection';
@import './mixins/_pie';
@import './mixins/_hover';
@import './mixins/_active';
@import './mixins/_hover-active';

// Plugins mixin
// ========================================================================
@import './plugins/grid/util/unit';
@import './plugins/grid/util/breakpoint';
@import './plugins/grid/util/flex';
@import './plugins/grid/util/visibility';
@import './plugins/grid/util/mixins';
@import './plugins/grid/mixins/gutter';
@import './plugins/grid/mixins/position';
@import './plugins/grid/mixins/layout';
@import './plugins/grid/mixins/container';
@import './plugins/grid/mixins/row';
@import './plugins/grid/mixins/column';
@import './plugins/grid/mixins/flex-grid';

@mixin nl {
    margin: 0;
    padding: 0;
    list-style: none outside none;
}

@function tracking( $target ) {
    @return ($target / 1000) * 1em;
}

@function unicode($str) {
    @return unquote("\"") + unquote(str-insert($str, "\\", 1)) + unquote("\"");
}

// =========================================================
// Framework grid generation
// =========================================================
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin bp($value) {
    @include breakpoint($value) {
        @content;
    }
}

@mixin min($value) {
    @include breakpoint($value) {
        @content;
    }
}

@mixin max($value) {
    @include breakpoint($value down) {
        @content;
    }
}

@mixin attr($x) {
    $sel: &;
    $collector: ();

    @for $i from 1 through length($sel) {
        $s: nth($sel, $i);
        $last: nth($s, -1);

        @if str-slice($last, -1) == "]" {
            // if is just the bare attribute with no value, $offset will be -1, otherwise it will be -2
            $offset: -1;
            $current-x: $x;

            @if str-slice($last, -2) == '"]' {
                // this attribute already has a value, so we need to adjust the offset
                $offset: -2;
            } @else {
                // no attribute value, so add the equals and quotes
                $current-x: '~="' + $x + '"';
            }
            $last: str-slice($last, 1, $offset - 1) + $current-x + str-slice($last, $offset);
            $collector: append($collector, set-nth($s, -1, $last), comma);
        } @else {
            // following line will append $x to your non-attribute selector
            $collector: append($collector, selector-append($s, $x), comma);
            // the following line will not change your non-attribute selector at all
            //$collector: append($collector, $s, comma);
        }
    }

    @at-root #{$collector} {
        @content;
    }
}
